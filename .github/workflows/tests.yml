name: tests

on:
  push:
    branches:
  pull_request:
    branches:

jobs:
  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Determine versions
        shell: bash -leo pipefail {0}
        id: get_versions
        run: |
          python="$(grep -v '#' .tool-versions | grep python | awk '{print $2}')"
          poetry="$(grep -v '#' .tool-versions | grep poetry | awk '{print $2}')"
          echo "poetry=${poetry}" >> $GITHUB_OUTPUT
          echo "python=${python}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ steps.get_versions.outputs.python }}

      - name: Install system deps
        shell: bash
        run: |
          pip install poetry==${{ steps.get_versions.outputs.poetry }}
          poetry config virtualenvs.in-project true
          poetry install --no-root --only dev --only linters --sync

      - name: Linting
        shell: bash
        run: poetry run pre-commit run --all-files

  tests:
    needs: linting
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu, MacOS]
        python-version: ['3.12']
      fail-fast: true
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system deps
        shell: bash
        run: |
          pip install nox-poetry
          pip install poetry
          poetry config virtualenvs.in-project true

      - name: Run mypy with nox
        shell: bash
        run: nox --force-color -s mypy-${{ matrix.python-version }}

      - name: Run tests with nox
        shell: bash
        run: nox --force-color -s tests-${{ matrix.python-version }}

      - name: Run security check
        if: matrix.python-version == '3.12' && matrix.os == 'Ubuntu'
        shell: bash
        run: nox --force-color -s security

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.python-version }}.coverage-data
          path: ".coverage.*"
          retention-days: 2
